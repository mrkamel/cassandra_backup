#!/usr/bin/env ruby

require "bundler/setup"
require "fileutils"
require "aws-sdk"
require "yaml"
require "thor"

class CassandraBackup < Thor
  desc "backup", "Create snapshot and backup the snapshot, ring config and schema to S3"

  option :snapshot_name, required: true
  option :config, required: true

  def backup
    config = YAML.load_file(options.config)
    hostname = `hostname`.strip

    bucket = Aws::S3::Resource.new(client: Aws::S3::Client.new(region: config["s3"]["region"], access_key_id: config["s3"]["access_key_id"], secret_access_key: config["s3"]["secret_access_key"])).bucket(config["s3"]["bucket"])

    pwd = FileUtils.pwd

    begin
      execute! "/usr/local/cassandra/bin/nodetool ring > /tmp/ring.txt"
      execute! "/usr/local/cassandra/bin/cqlsh -h #{hostname} -e 'DESC SCHEMA' > /tmp/schema.cql"
      execute! "/usr/local/cassandra/bin/nodetool snapshot -t #{options.snapshot_name}"

      s3_snapshot_path = File.join(config["s3"]["base_path"], options.snapshot_name, "/")

      FileUtils.cd "/usr/local/cassandra/data/data"

      files = Dir[File.join("*/*/snapshots", options.snapshot_name, "/*")]

      bucket.objects(prefix: s3_snapshot_path).batch_delete!

      bucket.object(File.join(s3_snapshot_path, hostname, "ring.txt")).put(body: open("/tmp/ring.txt", "rb"))
      bucket.object(File.join(s3_snapshot_path, hostname, "schema.cql")).put(body: open("/tmp/schema.cql", "rb"))

      files.each do |file|
        keyspace, table, _, _, filename = file.split("/")

        bucket.object(File.join(s3_snapshot_path, hostname, keyspace, table.gsub(/-.+/, ""), filename)).put(body: open(file, "rb"))
      end

      execute! "/usr/local/cassandra/bin/nodetool clearsnapshot"
    ensure
      FileUtils.cd pwd
    end
  end

  private

  def execute(cmd)
    puts cmd
    puts %x{ ( #{cmd} ) 2>&1 }

    $?.success?
  end

  def execute!(cmd)
    execute(cmd) || raise("command failed")
  end
end

CassandraBackup.start(ARGV)

